{"version":3,"sources":["components/StatusItem.js","components/HistoryView.js","components/HistoryViewButton.js","components/GameStatus.js","components/OrderList.js","data/setting.js","components/MarketView.js","components/AnimationConfig.js","App.js","serviceWorker.js","index.js"],"names":["TweenOne","plugins","push","Children","StatusItem","title","value","prefix","suffix","animation","formatMoney","floatLength","duration","className","HistoryView","render","props","roundIdx","wallet","resilientLevel","cattleInventory","productInventory","californiaOrdered","texasOrdered","numOfRound","messages","gutter","lg","span","style","marginBottom","map","Item","React","Component","Option","HistoryViewButton","state","historyViewVisible","gameStore","rounds","loadFromLocalStorage","gameStoreItem","localStorage","getItem","JSON","parse","loadRoundInfo","length","idx","orders","forEach","order","received","source","qty","setState","onRoundChanged","closeHistoryView","openHistoryView","onClickViewHistory","type","size","onClick","visible","onCancel","onOk","width","footer","float","marginLeft","marginRight","onChange","index","GameStatus","inventoryCapacity","processingCapacity","marginTop","OrderList","rowClassName","record","sort","a","b","expected","bordered","dataSource","columns","dataIndex","key","text","created","toLocaleString","pagination","pageSize","Object","assign","setting","pExpansionCostPerkg","pExpansionEffective","iExpansionCostPerkg","iExpansionEffective","MarketView","markets","AnimationConfig","onAnimationChanged","onDurationChanged","checkedChildren","paddingLeft","unCheckedChildren","paddingRight","checked","_N","n","toFixed","_C","prev","undefined","_U","defaultGameStore","initWallet","initInventory","fixCostPerRound","processingCost","processingOverloadCost","inventoryCost","inventoryOverloadCost","resilientLevelUpgraded","step","upgradeCostL2","upgradeCostL3","pExpansions","iExpansions","stepMessage","roundSetting","texasPurchasingPrice","californiaPurchasingPrice","texasPurchasingShutdown","californiaPurchasingShutdown","texasPurchasingAmount","californiaPurchasingAmount","purchasingEnabled","riskManagementEnabled","version","App","componentDidMount","reset","setItem","stringify","current","go","saveStateToGameStore","pop","resetGame","notification","destroy","getCurrentRoundSetting","roundSettings","toCurrency","toNumber","toPercentage","nextRound","console","log","messageTitle","messagesDrawerVisible","pExpansionAmount","iExpansionAmount","open","message","description","error","processes","process","onClose","payFixedCost","e","effectived","amount","handleEvent","inventoryLoss","processingCapacityLoss","event","texasDeliveryDelay","californiaDeliveryDelay","split","unshift","demand","sellingPrice","handleSelling","Math","min","income","handleInbound","handleProcessing","processingShutdown","totalProcessingCost","max","onTexasPurchasingAmountChanged","onCaliforniaPurchasingAmountChanged","handlePurchasing","price","orderCost","onResilientLevelUpgradedChanged","target","handleResilientLevelUpgrade","payInventoryCost","totalInventory","totalInventoryCost","viewMessages","onMessagesDrawerClosed","onPExpansionAmountChanged","onIExpansionAmountChanged","id","labelCol","label","margin","wrapperCol","offset","Group","display","height","lineHeight","placement","onConfirm","okText","cancelText","closable","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"q9vDAIAA,IAASC,QAAQC,KAAKC,KAEtB,IAuBeC,EAvBI,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,OACpCC,EAAY,CAChBN,SAAU,CACRG,MAAOA,EACPI,aAAa,EACbC,YAAa,GAEfC,SAAU,KAEZ,OACE,yBAAKC,UAAU,iBACb,yBAAKA,UAAU,uBAAuBR,GACtC,yBAAKQ,UAAU,yBACb,0BAAMA,UAAU,gCAAgCN,GAChD,0BAAMM,UAAU,+BACd,kBAAC,IAAD,CAAUJ,UAAWA,GAArB,MAEF,0BAAMI,UAAU,gCAAgCL,M,mCCsEzCM,E,4MAzFbC,OAAS,WAAO,IAAD,EAWT,EAAKC,MAAMV,MATbW,EAFW,EAEXA,SACAC,EAHW,EAGXA,OACAC,EAJW,EAIXA,eACAC,EALW,EAKXA,gBACAC,EANW,EAMXA,iBACAC,EAPW,EAOXA,kBACAC,EARW,EAQXA,aACAC,EATW,EASXA,WACAC,EAVW,EAUXA,SAGF,OACE,6BACE,uBAAKC,OAAQ,CAAEC,GAAI,KACjB,uBAAKC,KAAM,GAAID,GAAI,CAAEC,KAAM,KACzB,uBAAMC,MAAO,CAAEC,aAAc,KAC3B,uBAAKJ,OAAQ,CAAC,GAAI,KAChB,uBAAKE,KAAM,IACT,kBAAC,EAAD,CACEvB,MAAM,gBACNC,MAAOW,EAAW,EAClBV,OAAO,SACPC,OAAQ,KAAOgB,MAIrB,uBAAKE,OAAQ,CAAC,GAAI,KAChB,uBAAKE,KAAM,IACT,kBAAC,EAAD,CAAYvB,MAAM,eAAeC,MAAOY,EAAQX,OAAO,OAEzD,uBAAKqB,KAAM,IACT,kBAAC,EAAD,CACEvB,MAAM,aACNC,MAAOa,EACPZ,OAAO,YAIb,uBAAKmB,OAAQ,CAAC,GAAI,KAChB,uBAAKE,KAAM,IACT,kBAAC,EAAD,CACEvB,MAAM,mBACNC,MAAOc,EACPZ,OAAO,QAGX,uBAAKoB,KAAM,IACT,kBAAC,EAAD,CACEvB,MAAM,oBACNC,MAAOe,EACPb,OAAO,SAIb,uBAAKkB,OAAQ,CAAC,GAAI,KAChB,uBAAKE,KAAM,IACT,kBAAC,EAAD,CACEvB,MAAM,cACNC,MAAOiB,EACPf,OAAO,QAGX,uBAAKoB,KAAM,IACT,kBAAC,EAAD,CACEvB,MAAM,mBACNC,MAAOgB,EACPd,OAAO,WAMjB,uBAAKoB,KAAM,GAAID,GAAI,CAAEC,KAAM,KACzB,wBAAIC,MAAO,CAAEC,aAAc,KAA3B,YACA,2BACGL,EAASM,KAAI,SAACzB,GAAD,OACZ,sBAAU0B,KAAV,KAAgB1B,SAKxB,gC,YApFkB2B,IAAMC,WCExBC,E,IAAAA,OAgIOC,E,4MA7HbC,MAAQ,CACNpB,SAAU,EACVC,OAAQ,EACRC,eAAgB,EAChBC,gBAAiB,EACjBC,iBAAkB,EAClBC,kBAAmB,EACnBC,aAAc,EACdC,WAAY,EACZC,SAAU,GACVa,oBAAoB,G,EAGtBC,UAAY,CAAEC,OAAQ,CAAC,K,EAEvBC,qBAAuB,WACrB,IAAMC,EAAgBC,aAAaC,QAAQ,aACvCF,IACF,EAAKH,UAAYM,KAAKC,MAAMJ,IAE9B,EAAKK,cAAc,EAAKR,UAAUC,OAAOQ,OAAS,I,EAGpDD,cAAgB,SAACE,GACf,KAAIA,GAAO,EAAKV,UAAUC,OAAOQ,QAAkB,IAARC,GAA3C,CADuB,MAWnB,EAAKV,UAAUC,OAAOS,GARxBhC,EAHqB,EAGrBA,SACAC,EAJqB,EAIrBA,OACAC,EALqB,EAKrBA,eACAC,EANqB,EAMrBA,gBACAC,EAPqB,EAOrBA,iBACAG,EARqB,EAQrBA,WACAC,EATqB,EASrBA,SACAyB,EAVqB,EAUrBA,OAGE5B,EAAoB,EACpBC,EAAe,EAEnB2B,EAAOC,SAAQ,SAACC,GACTA,EAAMC,WACY,UAAjBD,EAAME,OAAoB/B,GAAgB6B,EAAMG,IAC/CjC,GAAqB8B,EAAMG,QAIpC,EAAKC,SAAS,CACZvC,WACAC,SACAC,iBACAC,kBACAC,mBACAG,aACAC,WACAH,oBACAC,mB,EAIJkC,eAAiB,SAACnD,GAChB,EAAKyC,cAAczC,I,EAGrBoD,iBAAmB,WACjB,EAAKF,SAAS,CACZlB,oBAAoB,K,EAIxBqB,gBAAkB,WAChB,EAAKlB,uBACL,EAAKe,SAAS,CACZlB,oBAAoB,K,EAIxBsB,mBAAqB,a,EACrB7C,OAAS,WACP,OACE,6BACE,uBAAQ8C,KAAK,UAAUC,KAAK,QAAQC,QAAS,EAAKJ,iBAAlD,gBAGA,uBACEtD,MAAM,eACN2D,QAAS,EAAK3B,MAAMC,mBACpB2B,SAAU,EAAKP,iBACfQ,KAAM,EAAKR,iBACXS,MAAO,IACPC,OACE,2BACE,uBAAKxC,KAAM,IACT,yBAAKC,MAAO,CAAEwC,MAAO,SACnB,wCACA,uBACEP,KAAK,QACLxD,MAAO,EAAK+B,MAAMpB,SAAW,EAC7BY,MAAO,CAAEsC,MAAO,GAAIG,WAAY,GAAIC,YAAa,IACjDC,SAAU,EAAKf,gBAEd,EAAKlB,UAAUC,OAAOT,KAAI,SAACzB,EAAOmE,GACjC,OAAIA,EAAQ,EACH,kBAACtC,EAAD,CAAQ7B,MAAOmE,GAAQA,GACpB,SAKpB,uBAAK7C,KAAM,IACT,yBAAKC,MAAO,CAAEwC,MAAO,UACnB,uBAAQR,KAAK,UAAUE,QAAS,EAAKL,kBAArC,aAQR,kBAAC,EAAD,CAAapD,MAAO,EAAK+B,W,YAvHHJ,IAAMC,WC8EvBwC,E,4MA/Eb3D,OAAS,WAAO,IAAD,EAUT,EAAKC,MAAMV,MARbW,EAFW,EAEXA,SACAC,EAHW,EAGXA,OACAC,EAJW,EAIXA,eACAC,EALW,EAKXA,gBACAC,EANW,EAMXA,iBACAsD,EAPW,EAOXA,kBACAC,EARW,EAQXA,mBACApD,EATW,EASXA,WAEF,OACE,2BACE,uBAAKE,OAAQ,CAAC,GAAI,KAChB,uBAAKE,KAAM,IACT,kBAAC,EAAD,CACEvB,MAAM,gBACNC,MAAOW,EAAW,EAClBV,OAAO,SACPC,OAAQ,KAAOgB,KAGnB,uBAAKI,KAAM,IACRX,EAAW,GACV,yBAAKY,MAAO,CAAEgD,UAAW,KACvB,kBAAC,EAAD,SAKR,uBAAKnD,OAAQ,CAAC,GAAI,KAChB,uBAAKE,KAAM,IACT,kBAAC,EAAD,CAAYvB,MAAM,eAAeC,MAAOY,EAAQX,OAAO,OAEzD,uBAAKqB,KAAM,IACT,kBAAC,EAAD,CACEvB,MAAM,aACNC,MAAOa,EACPZ,OAAO,YAIb,uBAAKmB,OAAQ,CAAC,GAAI,KAChB,uBAAKE,KAAM,IACT,kBAAC,EAAD,CACEvB,MAAM,mBACNC,MAAOc,EACPZ,OAAO,QAGX,uBAAKoB,KAAM,IACT,kBAAC,EAAD,CACEvB,MAAM,oBACNC,MAAOe,EACPb,OAAO,SAIb,uBAAKkB,OAAQ,CAAC,GAAI,KAChB,uBAAKE,KAAM,IACT,kBAAC,EAAD,CACEvB,MAAM,qBACNC,MAAOqE,EACPnE,OAAO,QAGX,uBAAKoB,KAAM,IACT,kBAAC,EAAD,CACEvB,MAAM,sBACNC,MAAOsE,EACPpE,OAAO,W,YAvEIyB,IAAMC,W,kBC2DhB4C,E,4MA5DbC,aAAe,SAACC,EAAQP,GACtB,OAAIO,EAAO3B,SACF,iBAEF,kB,EAGTtC,OAAS,WAAO,IACNmC,EAAW,EAAKlC,MAAhBkC,OAuCR,OAJAA,EAAO+B,MAAK,SAACC,EAAGC,GACd,OAAOA,EAAEC,SAAWF,EAAEE,YAItB,uBACEC,UAAQ,EACRC,WAAYpC,EACZY,KAAK,QACLiB,aAAc,EAAKA,aACnBQ,QA3CY,CACd,CACElF,MAAO,UACPmF,UAAW,UACXC,IAAK,UACL1E,OAAQ,SAAC2E,EAAMV,GAAP,MAAkB,KAAOA,EAAOW,QAAU,KAEpD,CACEtF,MAAO,SACPmF,UAAW,SACXC,IAAK,UAEP,CACEpF,MAAO,MACPmF,UAAW,MACXC,IAAK,MACL1E,OAAQ,SAAC2E,EAAMV,GAAP,OAAkBU,EAAKE,mBAEjC,CACEvF,MAAO,QACPmF,UAAW,QACXC,IAAK,QACL1E,OAAQ,SAAC2E,EAAMV,GAAP,OAAkBU,EAAKE,mBAEjC,CACEvF,MAAO,WACPmF,UAAW,WACXC,IAAK,WACL1E,OAAQ,SAACqE,EAAUJ,GAAX,OACNA,EAAO3B,SAAW,WAAa,KAAO2B,EAAOI,SAAW,MAe1DS,WAAY,CAAEC,SAAU,M,YAvDR7D,IAAMC,W,SCD9B6D,OAAOC,OAAOC,EAAS,CACrBC,oBAAqB,EACrBC,oBAAqB,EACrBC,oBAAqB,EACrBC,oBAAqB,IAGRJ,QC8BAK,E,4MAnCbvF,OAAS,WAAO,IACNwF,EAAY,EAAKvF,MAAjBuF,QAsBR,OACE,uBACElB,UAAQ,EACRC,WAAYiB,EACZzC,KAAK,QACLyB,QA1BY,CACd,CACElF,MAAO,QACPmF,UAAW,WACXC,IAAK,WACL1E,OAAQ,SAAC2E,GAAD,MAAU,IAAMA,IAE1B,CACErF,MAAO,SACPmF,UAAW,SACXC,IAAK,SACL1E,OAAQ,SAAC2E,GAAD,OAAUA,EAAKE,mBAEzB,CACEvF,MAAO,QACPmF,UAAW,eACXC,IAAK,eACL1E,OAAQ,SAAC2E,GAAD,OAAUA,EAAKE,oBAUvBC,WAAY,CAAEC,SAAU,M,YA9BP7D,IAAMC,W,kBCDvBC,E,IAAAA,OAsCOqE,E,4MAnCbzF,OAAS,WAAO,IAAD,EAMT,EAAKC,MAJPP,EAFW,EAEXA,UACAG,EAHW,EAGXA,SACA6F,EAJW,EAIXA,mBACAC,EALW,EAKXA,kBAEF,OACE,6BACE,2CACA,uBACEC,gBAAiB,0BAAM9E,MAAO,CAAE+E,YAAa,IAA5B,MACjBC,kBAAmB,0BAAMhF,MAAO,CAAEiF,aAAc,IAA7B,OACnBC,QAAStG,EACTqD,KAAK,QACLU,SAAUiC,EACV5E,MAAO,CAAEyC,WAAY,GAAIC,YAAa,MAEvC9D,GACC,uBACEqD,KAAK,QACLxD,MAAOM,EAAW,IAClBiB,MAAO,CAAEsC,MAAO,GAAIG,WAAY,GAAIC,YAAa,IACjDC,SAAUkC,GAEV,kBAAC,EAAD,CAAQpG,MAAO,GAAf,MACA,kBAAC,EAAD,CAAQA,MAAO,GAAf,MACA,kBAAC,EAAD,CAAQA,MAAO,GAAf,S,YA5BkB2B,IAAMC,WCkBpC,SAAS8E,EAAGC,GAEV,OADAA,GAAS,IAAJA,GAASC,UAAY,KACjBtB,iBAGX,SAASuB,EAAGF,GAAsB,IAAnBG,EAAkB,4DAAXC,EACpB,YAAaA,IAATD,EACK,IAAMJ,EAAGC,GAET,IAAMD,EAAGI,GAAQ,QAAUJ,EAAGC,GAIzC,SAASK,EAAGL,GAAsB,IAAnBG,EAAkB,4DAAXC,EACpB,YAAaA,IAATD,EACKJ,EAAGC,GAAK,KAERD,EAAGI,GAAQ,SAAWJ,EAAGC,GAAK,KAIzC,IAAMM,EAAmB,CACvB/E,OAAQ,CACN,CACEvB,UAAW,EAEXC,OAAQ+E,EAAQuB,WAChBrG,eAAgB,EAChBC,gBAAiB,EACjBC,iBAAkB4E,EAAQwB,cAE1BC,gBAAiBzB,EAAQyB,gBACzB9C,mBAAoBqB,EAAQrB,mBAC5B+C,eAAgB1B,EAAQ0B,eACxBC,uBAAwB3B,EAAQ2B,uBAEhCjD,kBAAmBsB,EAAQtB,kBAC3BkD,cAAe5B,EAAQ4B,cACvBC,sBAAuB7B,EAAQ6B,sBAE/BC,uBAAwB,EAExBC,KAAM,EACNC,cAAehC,EAAQgC,cACvBC,cAAejC,EAAQiC,cAEvBhC,oBAAqBD,EAAQC,oBAC7BC,oBAAqBF,EAAQE,oBAE7BC,oBAAqBH,EAAQG,oBAC7BC,oBAAqBJ,EAAQI,oBAE7B8B,YAAa,GACbC,YAAa,GAEb3G,SAAU,GACV4G,YAAa,GAEbnF,OAAQ,GACRqD,QAAS,GAET+B,aAAc,CACZC,qBAAsB,EACtBC,0BAA2B,EAC3BC,yBAAyB,EACzBC,8BAA8B,GAGhCC,sBAAuB,EACvBC,2BAA4B,EAE5BC,mBAAmB,EACnBC,uBAAuB,EAEvBlI,SAAU,EACVH,WAAW,EACXe,WAAYyE,EAAQzE,aAGxBuH,QAAS,OA+4BIC,E,kDAz4Bb,aAAe,IAAD,8BACZ,gBAHF3G,MAAQkF,EAAiB/E,OAAO,GAElB,EAedyG,kBAAoB,WAClB,EAAKxG,sBAAqB,IAhBd,EAmBdA,qBAAuB,SAACyG,GACtB,IAAMxG,EAAgBC,aAAaC,QAAQ,aAEvCL,EAAYgF,GACX2B,GAASxG,IACZH,EAAYM,KAAKC,MAAMJ,IACTqG,UAAYxB,EAAiBwB,UACzCxG,EAAYgF,GAGhB5E,aAAawG,QAAQ,YAAatG,KAAKuG,UAAU7G,IACjD,IAAM8G,EAAU9G,EAAUC,OAAOQ,OAAS,EAC1C,EAAKQ,SAASjB,EAAUC,OAAO6G,GAAU,EAAKC,KA/BlC,EAkCdC,qBAAuB,WACrB,IAAM7G,EAAgBC,aAAaC,QAAQ,aACvCL,EAAYgF,EACZ7E,IACFH,EAAYM,KAAKC,MAAMJ,IAGzB,IAAM2G,EAAU9G,EAAUC,OAAOQ,OAAS,EACtCT,EAAUC,OAAO6G,GAASpI,WAAa,EAAKoB,MAAMpB,UACpDsB,EAAUC,OAAOgH,MAEnBjH,EAAUC,OAAOtC,KAAK,EAAKmC,OAC3BM,aAAawG,QAAQ,YAAatG,KAAKuG,UAAU7G,KA9CrC,EAiDdkH,UAAY,WACVC,EAAA,EAAaC,UACb,EAAKlH,sBAAqB,IAnDd,EAsDdmH,uBAAyB,WACvB,IAAM3G,EAA4B,EAAtB,EAAKZ,MAAMpB,SAAe,EAAKoB,MAAMlB,eAAiB,EAClE,OAAO8E,EAAQ4D,cAAc5G,IAxDjB,EA2Dd6G,WAAa,SAAC7C,GACZ,MAAO,IAAM,EAAK8C,SAAS9C,IA5Df,EA+Dd8C,SAAW,SAAC9C,GAEV,OADAA,GAAS,IAAJA,GAASC,UAAY,KACjBtB,kBAjEG,EAoEdoE,aAAe,SAAC/C,GACd,OAAO,EAAK8C,SAAa,IAAJ9C,GAAW,KArEpB,EAwEdgD,UAAY,WACVC,QAAQC,IAAI,cACZ,EAAKZ,uBAEL,EAAK/F,SACH,CACEvC,SAAU,EAAKoB,MAAMpB,SAAW,EAChC2D,mBAAoBqB,EAAQrB,mBAC5BD,kBAAmBsB,EAAQtB,kBAC3BxD,eAAgB,EAAKkB,MAAM0F,uBAC3BA,uBAAwB,EACxBC,MAAO,EACPvG,SAAU,GACV4G,YAAa,GACb+B,aAAc,GACdzB,sBAAuB,EACvBC,2BAA4B,EAC5BC,mBAAmB,EACnBC,uBAAuB,EACvBuB,uBAAuB,EAEvBC,iBAAkB,EAClBC,iBAAkB,GAEpB,EAAKjB,KAhGK,EAoGdA,GAAK,WACH,GAAI,EAAKjH,MAAMpB,UAAYgF,EAAQzE,WACjCkI,EAAA,EAAac,KAAK,CAChBC,QAAS,aACTC,YACE,uFACF9J,SAAU,SAKd,GAAI,EAAKyB,MAAMnB,OAAS,EACtBwI,EAAA,EAAaiB,MAAM,CACjBF,QAAS,aACTC,YACE,gEACF9J,SAAU,SAId,KAAI,EAAKyB,MAAM2F,MAAQ,EAAK4C,UAAU5H,QACtC,IAAyB,IAArB,EAAKX,MAAM2F,KAAa,CAC1B,IAAMM,EAAe,EAAKsB,yBAC1B,EAAKpG,SACH,CACE8E,aAAcA,EACdN,KAAM,EAAK3F,MAAM2F,KAAO,GAE1B,EAAKsB,QAEF,CACL,IAAMuB,EAAU,EAAKD,UAAU,EAAKvI,MAAM2F,MAEtC,EAAK3F,MAAM5B,WAAwC,KAA3B,EAAK4B,MAAMgG,YACrCqB,EAAA,EAAac,KAAK,CAChBC,QAAS,EAAKpI,MAAM+H,aACpBM,YAAa,EAAKrI,MAAMgG,YACxBzH,SAAU,EAAKyB,MAAMzB,SACrBkK,QAASD,IAGPA,GAASA,MA7IL,EAkJdnE,kBAAoB,SAACpG,GACnB,EAAKkD,SAAS,CACZ5C,SAAUN,KApJA,EAwJdyK,aAAe,WAAO,IAAD,EAWf,EAAK1I,MATPnB,EAFiB,EAEjBA,OACAwG,EAHiB,EAGjBA,gBACAM,EAJiB,EAIjBA,KACA7G,EALiB,EAKjBA,eACAyD,EANiB,EAMjBA,mBACAD,EAPiB,EAOjBA,kBACAwD,EARiB,EAQjBA,YACAC,EATiB,EASjBA,YACAnH,EAViB,EAUjBA,SAEFC,GAAUwG,EACV,IAAIjG,EAAQ,YAAO,EAAKY,MAAMZ,UAE9BA,EAASvB,KAAT,kBACaiH,EAAG,EAAK9E,MAAMnB,QAD3B,wBACkDoG,EAC9C,EAAKjF,MAAMjB,gBAAkB,EAAKiB,MAAMhB,oBAI5C,IAAIgH,EAAW,yBAAqBlB,EAAGO,GAAxB,MAEXvG,EAAiB,IACnBkH,GAAW,iCAA8BlH,EAA9B,OAGbgH,EAAYhF,SAAQ,SAAC6H,GACfA,EAAEC,YAAchK,IAClB2D,GAAsBoG,EAAEE,QAEtBF,EAAEC,aAAehK,IACnBoH,GAAW,uCAAoCf,EAAG0D,EAAEE,QAAzC,UAIf9C,EAAYjF,SAAQ,SAAC6H,GACfA,EAAEC,YAAchK,IAClB0D,GAAqBqG,EAAEE,QAErBF,EAAEC,aAAehK,IACnBoH,GAAW,sCAAmCf,EAAG0D,EAAEE,QAAxC,UAIfzJ,EAASvB,KAAKmI,GACd,EAAK7E,SACH,CACEtC,OAAQA,EACRO,SAAUA,EACVuG,KAAMA,EAAO,EACbK,YAAaA,EACb1D,oBACAC,qBACAwF,aAAa,SAAD,OAAW,EAAK/H,MAAMpB,SAAW,EAAjC,WAEd,EAAKqI,KAhNK,EAoNd6B,YAAc,WAAO,IACX7C,EAAiB,EAAKjG,MAAtBiG,aAEN8C,EAKE9C,EALF8C,cACAC,EAIE/C,EAJF+C,uBACAC,EAGEhD,EAHFgD,MACAC,EAEEjD,EAFFiD,mBACAC,EACElD,EADFkD,wBAPgB,EAS6C,EAAKnJ,MAA9DpB,EATY,EASZA,SAAUI,EATE,EASFA,iBAAkBuD,EAThB,EASgBA,mBAAoBoD,EATpC,EASoCA,KAElDvG,EAAQ,YAAO,EAAKY,MAAMZ,UAC1ByB,EAAM,YAAO,EAAKb,MAAMa,QACxBqD,EAAO,YAAO,EAAKlE,MAAMkE,SAEzB8B,EAAciD,EAEJ,KAAVA,GACF7J,EAASvB,KAAT,MAAAuB,EAAQ,YAAS6J,EAAMG,MAAM,QAG/BpK,GAAoB,EAAI+J,EACxBxG,GAAsB,EAAIyG,EAEtBE,EAAqB,GACvBrI,EAAOnB,KAAI,SAACqB,GAIV,OAHIA,EAAMgC,UAAYnE,GAA6B,UAAjBmC,EAAME,SACtCF,EAAMgC,UAAYmG,GAEbnI,KAIPoI,EAA0B,GAC5BtI,EAAOnB,KAAI,SAACqB,GAIV,OAHIA,EAAMgC,UAAYnE,GAA6B,eAAjBmC,EAAME,SACtCF,EAAMgC,UAAYoG,GAEbpI,KAIXmD,EAAQmF,QAAQ,CACdzK,SAAUqH,EAAarH,SACvB0K,OAAQrD,EAAaqD,OACrBC,aAActD,EAAasD,eAG7B,EAAKpI,SACH,CACEnC,iBAAkBA,EAClBuD,mBAAoBA,EACpBoD,KAAMA,EAAO,EACbvG,SAAUA,EACV8E,QAASA,EACT8B,YAAaA,EACb+B,aAAc,SAEhB,EAAKd,KA9QK,EAkRduC,cAAgB,WACd,IAAIpK,EAAQ,YAAO,EAAKY,MAAMZ,UAEtB6G,EAAiB,EAAKjG,MAAtBiG,aAEFqD,EAAyBrD,EAAzBqD,OAAQC,EAAiBtD,EAAjBsD,aALM,EAMqB,EAAKvJ,MAAxChB,EANc,EAMdA,iBAAkBH,EANJ,EAMIA,OAAQ8G,EANZ,EAMYA,KAE5BkD,EAASY,KAAKC,IAAI1K,EAAkBsK,GACpCK,EAASd,EAASU,EACtB1K,GAAU8K,EAEV,IAAI3D,EAAc,GACd6C,EAAS,IACX7C,EAAW,eAAWf,EAAG4D,GAAd,oBAAiC/D,EAAG6E,GAApC,KACXvK,EAASvB,KAAKmI,IAGhB,EAAK7E,SACH,CACEnC,iBAAkBA,EAAmB6J,EACrChK,OAAQA,EACR8G,KAAMA,EAAO,EACbvG,SAAUA,EACV4G,YAAaA,EACb+B,aAAc,WAEhB,EAAKd,KA7SK,EAiTd2C,cAAgB,WAAO,IAAD,EACsB,EAAK5J,MAAzCpB,EADc,EACdA,SAAUG,EADI,EACJA,gBAAiB4G,EADb,EACaA,KAC7BvG,EAAQ,YAAO,EAAKY,MAAMZ,UAC1ByB,EAAM,YAAO,EAAKb,MAAMa,QACxBgI,EAAS,EACbhI,EAAOnB,KAAI,SAACqB,GAKV,OAJIA,EAAMgC,WAAanE,IACrBiK,GAAU9H,EAAMG,IAChBH,EAAMC,UAAW,GAEZD,KAEThC,GAAmB8J,EAEnB,IAAI7C,EAAc,GACd6C,EAAS,IACX7C,EAAW,UAAMf,EAAG4D,GAAT,cACXzJ,EAASvB,KAAKmI,IAGhB,EAAK7E,SACH,CACEwE,KAAMA,EAAO,EACbvG,SAAUA,EACVL,gBAAiBA,EACjBiH,YAAaA,EACbnF,OAAQA,EACRkH,aAAc,WAEhB,EAAKd,KA9UK,EAkVd4C,iBAAmB,WACjB,IAAIzK,EAAQ,YAAO,EAAKY,MAAMZ,UACtB6G,EAAiB,EAAKjG,MAAtBiG,aAFe,EAYnB,EAAKjG,MAPPuC,EALqB,EAKrBA,mBACA+C,EANqB,EAMrBA,eACAC,EAPqB,EAOrBA,uBACA1G,EARqB,EAQrBA,OACAE,EATqB,EASrBA,gBACAC,EAVqB,EAUrBA,iBACA2G,EAXqB,EAWrBA,KAKEK,EAAc,GAClB,GAH6BC,EAAvB6D,mBAIJ9D,EAAW,0BACN,CACL,IAAI+D,EACFN,KAAKC,IAAInH,EAAoBxD,GAAmBuG,EAChDmE,KAAKO,IAAI,EAAGjL,EAAkBwD,GAC5BgD,EACJ1G,GAAUkL,EACV/K,GAAoBD,EAChBA,EAAkB,IACpBiH,EAAW,kBAAcf,EAAGlG,GAAjB,kBAA2C+F,EACpDiF,KAGJhL,EAAkB,EAGA,KAAhBiH,GAAoB5G,EAASvB,KAAKmI,GAEtC6B,QAAQC,IAAI,eAAiB9B,GAE7B,EAAK7E,SACH,CACE/B,SAAUA,EACVL,gBAAiBA,EACjBC,iBAAkBA,EAClBH,OAAQA,EACR8G,KAAMA,EAAO,EACbK,YAAaA,EACb+B,aAAc,cAEhB,EAAKd,KAlYK,EAsYdgD,+BAAiC,SAAChM,GAChC,EAAKkD,SAAS,CACZmF,sBAAuBrI,KAxYb,EA4YdiM,oCAAsC,SAACjM,GACrC,EAAKkD,SAAS,CACZoF,2BAA4BtI,KA9YlB,EAkZdkM,iBAAmB,WACjB,IAAI/K,EAAQ,YAAO,EAAKY,MAAMZ,UAEtB6G,EAAiB,EAAKjG,MAAtBiG,aAENI,EAIEJ,EAJFI,6BACAD,EAGEH,EAHFG,wBACAD,EAEEF,EAFFE,0BACAD,EACED,EADFC,qBARqB,EAgBnB,EAAKlG,MALPpB,EAXqB,EAWrBA,SACAC,EAZqB,EAYrBA,OACA0H,EAbqB,EAarBA,2BACAD,EAdqB,EAcrBA,sBACAX,EAfqB,EAerBA,KAEE9E,EAAM,YAAO,EAAKb,MAAMa,QAExBmF,EAAc,GAClB,GAAII,EACFJ,GAAe,8BAEf,GAAIM,EAAwB,EAAG,CAC7B,IAAIvF,EAAQ,CACVuC,QAAS1E,EACTqC,OAAQ,QACRC,IAAKoF,EACL8D,MAAOlE,EACPnD,SAAUnE,EAAW,EACrBoC,UAAU,GAEZH,EAAOhD,KAAKkD,GACZ,IAAIsJ,EAAYtJ,EAAMG,IAAMH,EAAMqJ,MAClCpE,GAAW,gBAAaf,EAAGlE,EAAMG,KAAtB,6BAA+C4D,EACxDuF,GADS,MAGXxL,GAAUwL,EAGd,GAAIhE,EACFL,GAAe,mCAEf,GAAIO,EAA6B,EAAG,CAClC,IAAIxF,EAAQ,CACVuC,QAAS1E,EACTqC,OAAQ,aACRC,IAAKqF,EACL6D,MAAOjE,EACPpD,SAAUnE,EAAW,EACrBoC,UAAU,GAEZH,EAAOhD,KAAKkD,GACZ,IAAIsJ,EAAYtJ,EAAMG,IAAMH,EAAMqJ,MAClCpE,GAAW,gBAAaf,EAAGlE,EAAMG,KAAtB,kCAAoD4D,EAC7DuF,GADS,MAGXxL,GAAUwL,EAIVxL,EAAS,EACXwI,EAAA,EAAaiB,MAAM,CACjBF,QAAS,aACTC,YAAa,mBACb9J,SAAU,KAKM,KAAhByH,IACF5G,EAASvB,KAAKmI,GACV,EAAKhG,MAAM5B,WACbiJ,EAAA,EAAac,KAAK,CAChBC,QAAS,aACTC,YAAarC,EACbzH,SAAU,EAAKyB,MAAMzB,YAI3B,EAAK4C,SACH,CACEN,OAAQA,EACR8E,KAAMA,EAAO,EACb9G,OAAQA,EACRO,SAAUA,EACV4G,YAAa,GACb+B,aAAc,cAEhB,EAAKd,MA3eK,EA+edqD,gCAAkC,SAAC3B,GACjC,EAAKxH,SAAS,CACZuE,uBAAwBiD,EAAE4B,OAAOtM,SAjfvB,EAqfduM,4BAA8B,WAAO,IAAD,EAc9B,EAAKxK,MAZPnB,EAFgC,EAEhCA,OACA+G,EAHgC,EAGhCA,cACAC,EAJgC,EAIhCA,cACAH,EALgC,EAKhCA,uBACA7B,EANgC,EAMhCA,oBACAC,EAPgC,EAOhCA,oBACAmE,EARgC,EAQhCA,iBACAlE,EATgC,EAShCA,oBACAC,EAVgC,EAUhCA,oBACAkE,EAXgC,EAWhCA,iBACAvC,EAZgC,EAYhCA,KACA/G,EAbgC,EAahCA,SAEEQ,EAAQ,YAAO,EAAKY,MAAMZ,UAC1B0G,EAAW,YAAO,EAAK9F,MAAM8F,aAC7BC,EAAW,YAAO,EAAK/F,MAAM+F,aAE7BC,EAAc,IAEa,IAA3BN,GACF7G,GAAU+G,EAEVI,EAAW,yCAAqClB,EAC9Cc,GADS,mCAGyB,IAA3BF,IACT7G,GAAUgH,EACVG,EAAW,yCAAqClB,EAC9Ce,GADS,mCAKToC,EAAmB,KAErBpJ,GADWoJ,EAAmBpE,EAE9BmC,GAAW,2CAAwCf,EACjDgD,GADS,6BAEWnD,EACpBjB,GAHS,sCAIoBC,EAJpB,kBAMXgC,EAAYjI,KAAK,CACfgL,OAAQZ,EACRW,WAAYhK,EAAWkF,KAIvBoE,EAAmB,IAErBrJ,GADWqJ,EAAmBnE,EAE9BiC,GAAW,0CAAuCf,EAChDiD,GADS,6BAEWpD,EACpBf,GAHS,qCAImBC,EAJnB,kBAKX+B,EAAYlI,KAAK,CACfgL,OAAQX,EACRU,WAAYhK,EAAWoF,KAIvBnF,EAAS,EACXwI,EAAA,EAAaiB,MAAM,CACjBF,QAAS,kBACTC,YAAa,mBACb9J,SAAU,KAKM,KAAhByH,GACF5G,EAASvB,KAAKmI,GAEhB,EAAK7E,SACH,CACE/B,SAAUA,EACVP,OAAQA,EACRmH,YAAaA,EACbL,KAAMA,EAAO,EACboC,aAAc,kBACdhC,cACAD,eAEF,EAAKmB,MA1kBK,EA8kBdwD,iBAAmB,WACjB5C,QAAQC,IAAI,sBADW,MASnB,EAAK9H,MANPhB,EAHqB,EAGrBA,iBACAD,EAJqB,EAIrBA,gBACAyG,EALqB,EAKrBA,cACAC,EANqB,EAMrBA,sBACAnD,EAPqB,EAOrBA,kBACAqD,EARqB,EAQrBA,KAEI9G,EAAW,EAAKmB,MAAhBnB,OACFO,EAAQ,YAAO,EAAKY,MAAMZ,UAE1BsL,EAAiB1L,EAAmBD,EAEpC4L,EACFlB,KAAKC,IAAIpH,EAAmBoI,GAAkBlF,EAC9CiE,KAAKO,IAAI,EAAGU,EAAiBpI,GAAqBmD,EAEpD5G,GAAU8L,EAEV,IAAI3E,EAAc,GACd0E,EAAiB,IACnB1E,EAAW,6BAAyBf,EAAGyF,GAA5B,kBAAqD5F,EAC9D6F,GADS,gBAGXvL,EAASvB,KAAKmI,IAEhB,EAAK7E,SACH,CACE/B,SAAUA,EACVuG,KAAMA,EAAO,EACb9G,OAAQA,EACRmH,YAAaA,EACb+B,aAAc,aAEhB,EAAKd,KAlnBK,EAsnBd2D,aAAe,WACb,EAAKzJ,SAAS,CACZ6G,uBAAuB,KAxnBb,EA4nBd6C,uBAAyB,WACvB,EAAK1J,SAAS,CACZ6G,uBAAuB,KA9nBb,EAkoBd5D,mBAAqB,SAACM,GACpB,EAAKvD,SAAS,CACZ/C,UAAWsG,KApoBD,EAwoBdoG,0BAA4B,SAAC7M,GAC3B,EAAKkD,SAAS,CACZ8G,iBAAkBhK,KA1oBR,EA8oBd8M,0BAA4B,SAAC9M,GAC3B,EAAKkD,SAAS,CACZ+G,iBAAkBjK,KAhpBR,EAopBdS,OAAS,WACP,OACE,yBAAKF,UAAU,OACb,yBAAKwM,GAAG,UACN,yBAAKxM,UAAU,aACb,2BACE,uBAAKe,KAAM,GAAID,GAAI,CAAEC,KAAM,KACzB,iDAEF,uBAAKA,KAAM,EAAGD,GAAI,CAAEC,KAAM,KACxB,yBAAKyL,GAAG,kBACN,kBAAC,EAAD,CACE5M,UAAW,EAAK4B,MAAM5B,UACtBG,SAAU,EAAKyB,MAAMzB,SACrB6F,mBAAoB,EAAKA,mBACzBC,kBAAmB,EAAKA,yBAQpC,yBAAK2G,GAAG,WACN,yBAAKxM,UAAU,aACb,uBAAKa,OAAQ,CAAEC,GAAI,KACjB,uBAAKC,KAAM,GAAID,GAAI,CAAEC,KAAM,IACzB,uBAAMC,MAAO,CAAEC,aAAc,KAC3B,kBAAC,EAAD,CACErB,UAAW,EAAK4B,MAAM5B,UACtBG,SAAU,EAAKyB,MAAMzB,SACrB6F,mBAAoB,EAAKA,mBACzBC,kBAAmB,EAAKA,sBAI9B,uBAAK9E,KAAM,GAAID,GAAI,CAAEC,KAAM,KACzB,kBAAC,EAAD,CAAYtB,MAAO,EAAK+B,QACxB,wBAAIR,MAAO,CAAEgD,UAAW,KAAxB,cACA,kBAAC,EAAD,CAAW3B,OAAQ,EAAKb,MAAMa,SAC9B,wBAAIrB,MAAO,CAAEgD,UAAW,KAAxB,kBACA,kBAAC,EAAD,CAAY0B,QAAS,EAAKlE,MAAMkE,WAElC,uBAAK3E,KAAM,GAAID,GAAI,CAAEC,KAAM,KACzB,uBAAMvB,MAAM,WAAWwB,MAAO,CAAEC,aAAc,KAC5C,2BACG,EAAKO,MAAMZ,SAASM,KAAI,SAACzB,GAAD,OACvB,sBAAU0B,KAAV,CAAeyD,IAAKnF,GAAQA,QAKb,IAApB,EAAK+B,MAAM2F,MAAkC,IAApB,EAAK3F,MAAM2F,MACnC,uBAAM3H,MAAM,cACV,6BAGiB,IAApB,EAAKgC,MAAM2F,MAAc,EAAK3F,MAAMnB,QAAU,GAC7C,uBAAMb,MAAM,cACV,uBACEiN,SAAU,CAAE1L,KAAM,GAClBkC,KAAK,QACLjC,MAAO,CAAEgD,UAAW,SAEpB,sBAAM7C,KAAN,CAAWuL,MAAM,gBACd,EAAKlL,MAAMiG,aAAaG,yBACvB,gDAEA,EAAKpG,MAAMiG,aAAaG,yBACxB,6BACE,uBACE3E,KAAK,QACLiI,IAAK,EACLM,IAAK,IACL/L,MAAO,EAAK+B,MAAMsG,sBAClBnE,SAAU,EAAK8H,iCAEjB,0BAAMzK,MAAO,CAAE2L,OAAQ,SACpB,KACCrG,EACE,EAAK9E,MAAMiG,aAAaC,yBAMpC,sBAAMvG,KAAN,CAAWuL,MAAM,qBACd,EAAKlL,MAAMiG,aACTI,8BACD,gDAEA,EAAKrG,MAAMiG,aACVI,8BACD,6BACE,uBACE5E,KAAK,QACLiI,IAAK,EACLM,IAAK,IACL/L,MAAO,EAAK+B,MAAMuG,2BAClBpE,SACE,EAAK+H,sCAGT,0BAAM1K,MAAO,CAAE2L,OAAQ,SACpB,KACCrG,EACE,EAAK9E,MAAMiG,aACRE,8BAOf,sBAAMxG,KAAN,CAAWyL,WAAY,CAAEC,OAAQ,IAC/B,uBAAQ7J,KAAK,UAAUE,QAAS,EAAKyI,kBAArC,YAOa,IAApB,EAAKnK,MAAM2F,MAAc,EAAK3F,MAAMnB,QAAU,GAC7C,uBAAMb,MAAM,mBACV,uBACEiN,SAAU,CAAE1L,KAAM,GAClBkC,KAAK,QACLjC,MAAO,CAAEgD,UAAW,SAEpB,sBAAM7C,KAAN,CAAWuL,MAAM,mBACf,sBAAOI,MAAP,CACErN,MAAO,EAAK+B,MAAM0F,uBAClBvD,SAAU,EAAKmI,iCAEf,uBACErM,MAAO,EACPuB,MAAO,CACL+L,QAAS,QACTC,OAAQ,OACRC,WAAY,SALhB,0BAUA,uBACExN,MAAO,EACPuB,MAAO,CACL+L,QAAS,QACTC,OAAQ,OACRC,WAAY,SALhB,iCAQiC,IAC9B3G,EAAG,EAAK9E,MAAM4F,eATjB,KAWA,uBACE3H,MAAO,EACPuB,MAAO,CACL+L,QAAS,QACTC,OAAQ,OACRC,WAAY,SALhB,iCAQiC,IAC9B3G,EAAG,EAAK9E,MAAM6F,eATjB,OAaJ,sBAAMlG,KAAN,CAAWuL,MAAM,yBAAjB,gCAEE,uBACEzJ,KAAK,QACLiI,IAAK,EACLM,IAAK,IACLxK,MAAO,CAAE2L,OAAQ,WACjBlN,MAAO,EAAK+B,MAAMiI,iBAClB9F,SAAU,EAAK2I,4BARnB,oBAUoBhG,EAAG,EAAK9E,MAAM6D,qBAVlC,6BAW2B,EAAK7D,MAAM8D,oBAAqB,IAX3D,iBAcA,sBAAMnE,KAAN,CAAWuL,MAAM,wBAAjB,+BAEE,uBACEzJ,KAAK,QACLiI,IAAK,EACLM,IAAK,IACLxK,MAAO,CAAE2L,OAAQ,WACjBlN,MAAO,EAAK+B,MAAMkI,iBAClB/F,SAAU,EAAK4I,4BARnB,oBAUoBjG,EAAG,EAAK9E,MAAM+D,qBAVlC,6BAW2B,EAAK/D,MAAMgE,oBAAqB,IAX3D,iBAcA,sBAAMrE,KAAN,CAAWyL,WAAY,CAAEC,OAAQ,IAC/B,uBACE7J,KAAK,UACLE,QAAS,EAAK8I,6BAFhB,8BAUR,yBAAKhL,MAAO,CAAEwC,MAAO,QAASQ,UAAW,SACvC,uBACEkJ,UAAU,SACV1N,MAAM,6CACN2N,UAAW,EAAKvE,UAChBwE,OAAO,MACPC,WAAW,MAEX,uBAAQrK,KAAK,UAAb,oBAOZ,yBAAKwJ,GAAG,UAAR,2BAGA,uBACEhN,MAAM,WACN0N,UAAU,QACVI,UAAU,EACVrD,QAAS,EAAKoC,uBACdlJ,QAAS,EAAK3B,MAAMgI,sBACpBlG,MAAO,KAEP,2BACG,EAAK9B,MAAMZ,SAASM,KAAI,SAACzB,GAAD,OACvB,sBAAU0B,KAAV,CAAeyD,IAAKnF,GAAQA,OAVlC,OAn3BJ,EAAKsK,UAAY,CACf,EAAKG,aACL,EAAKI,YACL,EAAKU,cACL,EAAKI,cACL,EAAKC,iBACL,KACA,KACA,EAAKY,iBACL,EAAK7C,WAXK,E,UAHEhI,IAAMC,WC5FJkM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAS1N,OACP,kBAAC,IAAM2N,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxE,GACLT,QAAQS,MAAMA,EAAMF,c","file":"static/js/main.ebff12bf.chunk.js","sourcesContent":["import React from \"react\";\nimport TweenOne from \"rc-tween-one\";\nimport Children from \"rc-tween-one/lib/plugin/ChildrenPlugin\";\n\nTweenOne.plugins.push(Children);\n\nconst StatusItem = ({ title, value, prefix, suffix }) => {\n  const animation = {\n    Children: {\n      value: value,\n      formatMoney: true,\n      floatLength: 0,\n    },\n    duration: 1000,\n  };\n  return (\n    <div className=\"ant-statistic\">\n      <div className=\"ant-statistic-title\">{title}</div>\n      <div className=\"ant-statistic-content\">\n        <span className=\"ant-statistic-content-prefix\">{prefix}</span>\n        <span className=\"ant-statistic-content-value\">\n          <TweenOne animation={animation}>0</TweenOne>\n        </span>\n        <span className=\"ant-statistic-content-suffix\">{suffix}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default StatusItem;\n","import React from \"react\";\nimport { Row, Col, Card, Timeline } from \"antd\";\nimport StatusItem from \"./StatusItem\";\nclass HistoryView extends React.Component {\n  render = () => {\n    const {\n      roundIdx,\n      wallet,\n      resilientLevel,\n      cattleInventory,\n      productInventory,\n      californiaOrdered,\n      texasOrdered,\n      numOfRound,\n      messages,\n    } = this.props.value;\n\n    return (\n      <div>\n        <Row gutter={{ lg: 20 }}>\n          <Col span={24} lg={{ span: 12 }}>\n            <Card style={{ marginBottom: 30 }}>\n              <Row gutter={[16, 20]}>\n                <Col span={12}>\n                  <StatusItem\n                    title=\"Current Round\"\n                    value={roundIdx + 1}\n                    prefix=\"Round \"\n                    suffix={\"/ \" + numOfRound}\n                  />\n                </Col>\n              </Row>\n              <Row gutter={[16, 20]}>\n                <Col span={12}>\n                  <StatusItem title=\"Wallet (USD)\" value={wallet} prefix=\"$\" />\n                </Col>\n                <Col span={12}>\n                  <StatusItem\n                    title=\"Resilience\"\n                    value={resilientLevel}\n                    prefix=\"Level\"\n                  />\n                </Col>\n              </Row>\n              <Row gutter={[16, 20]}>\n                <Col span={12}>\n                  <StatusItem\n                    title=\"Cattle Inventory\"\n                    value={cattleInventory}\n                    suffix=\"kg\"\n                  />\n                </Col>\n                <Col span={12}>\n                  <StatusItem\n                    title=\"Product Inventory\"\n                    value={productInventory}\n                    suffix=\"kg\"\n                  />\n                </Col>\n              </Row>\n              <Row gutter={[16, 20]}>\n                <Col span={12}>\n                  <StatusItem\n                    title=\"Texas Order\"\n                    value={texasOrdered}\n                    suffix=\"kg\"\n                  />\n                </Col>\n                <Col span={12}>\n                  <StatusItem\n                    title=\"California Order\"\n                    value={californiaOrdered}\n                    suffix=\"kg\"\n                  />\n                </Col>\n              </Row>\n            </Card>\n          </Col>\n          <Col span={24} lg={{ span: 12 }}>\n            <h3 style={{ marginBottom: 30 }}>Messages</h3>\n            <Timeline>\n              {messages.map((value) => (\n                <Timeline.Item>{value}</Timeline.Item>\n              ))}\n            </Timeline>\n          </Col>\n        </Row>\n        <div></div>\n      </div>\n    );\n  };\n}\n\nexport default HistoryView;\n","import React from \"react\";\n\nimport { Button, Modal, Row, Col, Select } from \"antd\";\nimport HistoryView from \"./HistoryView\";\n\nconst { Option } = Select;\n\nclass HistoryViewButton extends React.Component {\n  state = {\n    roundIdx: 0,\n    wallet: 0,\n    resilientLevel: 1,\n    cattleInventory: 0,\n    productInventory: 0,\n    californiaOrdered: 0,\n    texasOrdered: 0,\n    numOfRound: 0,\n    messages: [],\n    historyViewVisible: false,\n  };\n\n  gameStore = { rounds: [{}] };\n\n  loadFromLocalStorage = () => {\n    const gameStoreItem = localStorage.getItem(\"gameStore\");\n    if (gameStoreItem) {\n      this.gameStore = JSON.parse(gameStoreItem);\n    }\n    this.loadRoundInfo(this.gameStore.rounds.length - 1);\n  };\n\n  loadRoundInfo = (idx) => {\n    if (idx >= this.gameStore.rounds.length || idx === 0) return;\n    const {\n      roundIdx,\n      wallet,\n      resilientLevel,\n      cattleInventory,\n      productInventory,\n      numOfRound,\n      messages,\n      orders,\n    } = this.gameStore.rounds[idx];\n\n    let californiaOrdered = 0;\n    let texasOrdered = 0;\n\n    orders.forEach((order) => {\n      if (!order.received) {\n        if (order.source === \"Texas\") texasOrdered += order.qty;\n        else californiaOrdered += order.qty;\n      }\n    });\n\n    this.setState({\n      roundIdx,\n      wallet,\n      resilientLevel,\n      cattleInventory,\n      productInventory,\n      numOfRound,\n      messages,\n      californiaOrdered,\n      texasOrdered,\n    });\n  };\n\n  onRoundChanged = (value) => {\n    this.loadRoundInfo(value);\n  };\n\n  closeHistoryView = () => {\n    this.setState({\n      historyViewVisible: false,\n    });\n  };\n\n  openHistoryView = () => {\n    this.loadFromLocalStorage();\n    this.setState({\n      historyViewVisible: true,\n    });\n  };\n\n  onClickViewHistory = () => {};\n  render = () => {\n    return (\n      <div>\n        <Button type=\"default\" size=\"small\" onClick={this.openHistoryView}>\n          View History\n        </Button>\n        <Modal\n          title=\"View History\"\n          visible={this.state.historyViewVisible}\n          onCancel={this.closeHistoryView}\n          onOk={this.closeHistoryView}\n          width={800}\n          footer={\n            <Row>\n              <Col span={12}>\n                <div style={{ float: \"left\" }}>\n                  <span>Round:</span>\n                  <Select\n                    size=\"small\"\n                    value={this.state.roundIdx + 1}\n                    style={{ width: 60, marginLeft: 10, marginRight: 10 }}\n                    onChange={this.onRoundChanged}\n                  >\n                    {this.gameStore.rounds.map((value, index) => {\n                      if (index > 0)\n                        return <Option value={index}>{index}</Option>;\n                      else return \"\";\n                    })}\n                  </Select>\n                </div>\n              </Col>\n              <Col span={12}>\n                <div style={{ float: \"right\" }}>\n                  <Button type=\"primary\" onClick={this.closeHistoryView}>\n                    Close\n                  </Button>\n                </div>\n              </Col>\n            </Row>\n          }\n        >\n          <HistoryView value={this.state} />\n        </Modal>\n      </div>\n    );\n  };\n}\n\nexport default HistoryViewButton;\n","import React from \"react\";\nimport { Col, Row, Card } from \"antd\";\nimport StatusItem from \"./StatusItem\";\nimport HistoryViewButton from \"./HistoryViewButton\";\n\nclass GameStatus extends React.Component {\n  render = () => {\n    const {\n      roundIdx,\n      wallet,\n      resilientLevel,\n      cattleInventory,\n      productInventory,\n      inventoryCapacity,\n      processingCapacity,\n      numOfRound,\n    } = this.props.value;\n    return (\n      <Card>\n        <Row gutter={[16, 20]}>\n          <Col span={12}>\n            <StatusItem\n              title=\"Current Round\"\n              value={roundIdx + 1}\n              prefix=\"Round \"\n              suffix={\"/ \" + numOfRound}\n            />\n          </Col>\n          <Col span={12}>\n            {roundIdx > 0 && (\n              <div style={{ marginTop: 36 }}>\n                <HistoryViewButton />\n              </div>\n            )}\n          </Col>\n        </Row>\n        <Row gutter={[16, 20]}>\n          <Col span={12}>\n            <StatusItem title=\"Wallet (USD)\" value={wallet} prefix=\"$\" />\n          </Col>\n          <Col span={12}>\n            <StatusItem\n              title=\"Resilience\"\n              value={resilientLevel}\n              prefix=\"Level\"\n            />\n          </Col>\n        </Row>\n        <Row gutter={[16, 20]}>\n          <Col span={12}>\n            <StatusItem\n              title=\"Cattle Inventory\"\n              value={cattleInventory}\n              suffix=\"kg\"\n            />\n          </Col>\n          <Col span={12}>\n            <StatusItem\n              title=\"Product Inventory\"\n              value={productInventory}\n              suffix=\"kg\"\n            />\n          </Col>\n        </Row>\n        <Row gutter={[16, 20]}>\n          <Col span={12}>\n            <StatusItem\n              title=\"Inventory Capacity\"\n              value={inventoryCapacity}\n              suffix=\"kg\"\n            />\n          </Col>\n          <Col span={12}>\n            <StatusItem\n              title=\"Processing Capacity\"\n              value={processingCapacity}\n              suffix=\"kg\"\n            />\n          </Col>\n        </Row>\n      </Card>\n    );\n  };\n}\n\nexport default GameStatus;\n","import React from \"react\";\nimport { Table } from \"antd\";\n\nclass OrderList extends React.Component {\n  rowClassName = (record, index) => {\n    if (record.received) {\n      return \"received-order\";\n    }\n    return \"pendding-order\";\n  };\n\n  render = () => {\n    const { orders } = this.props;\n\n    const columns = [\n      {\n        title: \"Created\",\n        dataIndex: \"created\",\n        key: \"created\",\n        render: (text, record) => \"R\" + (record.created + 1),\n      },\n      {\n        title: \"Source\",\n        dataIndex: \"source\",\n        key: \"source\",\n      },\n      {\n        title: \"QTY\",\n        dataIndex: \"qty\",\n        key: \"qty\",\n        render: (text, record) => text.toLocaleString(),\n      },\n      {\n        title: \"Price\",\n        dataIndex: \"price\",\n        key: \"price\",\n        render: (text, record) => text.toLocaleString(),\n      },\n      {\n        title: \"Expected\",\n        dataIndex: \"expected\",\n        key: \"expected\",\n        render: (expected, record) =>\n          record.received ? \"Received\" : \"R\" + (record.expected + 1),\n      },\n    ];\n\n    orders.sort((a, b) => {\n      return b.expected - a.expected;\n    });\n\n    return (\n      <Table\n        bordered\n        dataSource={orders}\n        size=\"small\"\n        rowClassName={this.rowClassName}\n        columns={columns}\n        pagination={{ pageSize: 5 }}\n      />\n    );\n  };\n}\n\nexport default OrderList;\n","import setting from \"./settings.json\";\n\nObject.assign(setting, {\n  pExpansionCostPerkg: 5,\n  pExpansionEffective: 5,\n  iExpansionCostPerkg: 5,\n  iExpansionEffective: 5,\n});\n\nexport default setting;\n","import React from \"react\";\nimport { Table } from \"antd\";\n\nclass MarketView extends React.Component {\n  render = () => {\n    const { markets } = this.props;\n    const columns = [\n      {\n        title: \"Round\",\n        dataIndex: \"roundIdx\",\n        key: \"roundIdx\",\n        render: (text) => \"R\" + text,\n      },\n      {\n        title: \"Demand\",\n        dataIndex: \"demand\",\n        key: \"demand\",\n        render: (text) => text.toLocaleString(),\n      },\n      {\n        title: \"Price\",\n        dataIndex: \"sellingPrice\",\n        key: \"sellingPrice\",\n        render: (text) => text.toLocaleString(),\n      },\n    ];\n\n    return (\n      <Table\n        bordered\n        dataSource={markets}\n        size=\"small\"\n        columns={columns}\n        pagination={{ pageSize: 5 }}\n      />\n    );\n  };\n}\n\nexport default MarketView;\n","import React from \"react\";\nimport { Switch, Select } from \"antd\";\nconst { Option } = Select;\n\nclass AnimationConfig extends React.Component {\n  render = () => {\n    const {\n      animation,\n      duration,\n      onAnimationChanged,\n      onDurationChanged,\n    } = this.props;\n    return (\n      <div>\n        <span>Animation</span>\n        <Switch\n          checkedChildren={<span style={{ paddingLeft: 5 }}>on</span>}\n          unCheckedChildren={<span style={{ paddingRight: 5 }}>off</span>}\n          checked={animation}\n          size=\"small\"\n          onChange={onAnimationChanged}\n          style={{ marginLeft: 10, marginRight: 10 }}\n        />\n        {animation && (\n          <Select\n            size=\"small\"\n            value={duration + \"s\"}\n            style={{ width: 60, marginLeft: 10, marginRight: 10 }}\n            onChange={onDurationChanged}\n          >\n            <Option value={5}>5s</Option>\n            <Option value={3}>3s</Option>\n            <Option value={1}>1s</Option>\n          </Select>\n        )}\n      </div>\n    );\n  };\n}\n\nexport default AnimationConfig;\n","import React from \"react\";\nimport \"./App.css\";\nimport {\n  Col,\n  Row,\n  Form,\n  InputNumber,\n  Button,\n  Radio,\n  notification,\n  Card,\n  Skeleton,\n  Drawer,\n  Timeline,\n  Popconfirm,\n} from \"antd\";\nimport GameStatus from \"./components/GameStatus\";\nimport OrderList from \"./components/OrderList\";\nimport setting from \"./data/setting\";\nimport MarketView from \"./components/MarketView\";\nimport AnimationConfig from \"./components/AnimationConfig\";\n\nfunction _N(n) {\n  n = (n * 100).toFixed() / 100;\n  return n.toLocaleString();\n}\n\nfunction _C(n, prev = undefined) {\n  if (prev === undefined) {\n    return \"$\" + _N(n);\n  } else {\n    return \"$\" + _N(prev) + \" -> $\" + _N(n);\n  }\n}\n\nfunction _U(n, prev = undefined) {\n  if (prev === undefined) {\n    return _N(n) + \"kg\";\n  } else {\n    return _N(prev) + \"kg -> \" + _N(n) + \"kg\";\n  }\n}\n\nconst defaultGameStore = {\n  rounds: [\n    {\n      roundIdx: -1,\n\n      wallet: setting.initWallet,\n      resilientLevel: 1,\n      cattleInventory: 0,\n      productInventory: setting.initInventory,\n\n      fixCostPerRound: setting.fixCostPerRound,\n      processingCapacity: setting.processingCapacity,\n      processingCost: setting.processingCost,\n      processingOverloadCost: setting.processingOverloadCost,\n\n      inventoryCapacity: setting.inventoryCapacity,\n      inventoryCost: setting.inventoryCost,\n      inventoryOverloadCost: setting.inventoryOverloadCost,\n\n      resilientLevelUpgraded: 1,\n\n      step: 8,\n      upgradeCostL2: setting.upgradeCostL2,\n      upgradeCostL3: setting.upgradeCostL3,\n\n      pExpansionCostPerkg: setting.pExpansionCostPerkg,\n      pExpansionEffective: setting.pExpansionEffective,\n\n      iExpansionCostPerkg: setting.iExpansionCostPerkg,\n      iExpansionEffective: setting.iExpansionEffective,\n\n      pExpansions: [],\n      iExpansions: [],\n\n      messages: [],\n      stepMessage: \"\",\n\n      orders: [],\n      markets: [],\n\n      roundSetting: {\n        texasPurchasingPrice: 0,\n        californiaPurchasingPrice: 0,\n        texasPurchasingShutdown: false,\n        californiaPurchasingShutdown: false,\n      },\n\n      texasPurchasingAmount: 0,\n      californiaPurchasingAmount: 0,\n\n      purchasingEnabled: false,\n      riskManagementEnabled: false,\n\n      duration: 5,\n      animation: true,\n      numOfRound: setting.numOfRound,\n    },\n  ],\n  version: \"1.9\",\n};\n\nclass App extends React.Component {\n  state = defaultGameStore.rounds[0];\n\n  constructor() {\n    super();\n    this.processes = [\n      this.payFixedCost,\n      this.handleEvent,\n      this.handleSelling,\n      this.handleInbound,\n      this.handleProcessing,\n      null,\n      null,\n      this.payInventoryCost,\n      this.nextRound,\n    ];\n  }\n\n  componentDidMount = () => {\n    this.loadFromLocalStorage(false);\n  };\n\n  loadFromLocalStorage = (reset) => {\n    const gameStoreItem = localStorage.getItem(\"gameStore\");\n\n    let gameStore = defaultGameStore;\n    if (!reset && gameStoreItem) {\n      gameStore = JSON.parse(gameStoreItem);\n      if (gameStore.version !== defaultGameStore.version) {\n        gameStore = defaultGameStore;\n      }\n    }\n    localStorage.setItem(\"gameStore\", JSON.stringify(gameStore));\n    const current = gameStore.rounds.length - 1;\n    this.setState(gameStore.rounds[current], this.go);\n  };\n\n  saveStateToGameStore = () => {\n    const gameStoreItem = localStorage.getItem(\"gameStore\");\n    let gameStore = defaultGameStore;\n    if (gameStoreItem) {\n      gameStore = JSON.parse(gameStoreItem);\n    }\n\n    const current = gameStore.rounds.length - 1;\n    if (gameStore.rounds[current].roundIdx === this.state.roundIdx) {\n      gameStore.rounds.pop();\n    }\n    gameStore.rounds.push(this.state);\n    localStorage.setItem(\"gameStore\", JSON.stringify(gameStore));\n  };\n\n  resetGame = () => {\n    notification.destroy();\n    this.loadFromLocalStorage(true);\n  };\n\n  getCurrentRoundSetting = () => {\n    const idx = this.state.roundIdx * 3 + this.state.resilientLevel - 1;\n    return setting.roundSettings[idx];\n  };\n\n  toCurrency = (n) => {\n    return \"$\" + this.toNumber(n);\n  };\n\n  toNumber = (n) => {\n    n = (n * 100).toFixed() / 100;\n    return n.toLocaleString();\n  };\n\n  toPercentage = (n) => {\n    return this.toNumber(n * 100) + \"%\";\n  };\n\n  nextRound = () => {\n    console.log(\"Next Round\");\n    this.saveStateToGameStore();\n\n    this.setState(\n      {\n        roundIdx: this.state.roundIdx + 1,\n        processingCapacity: setting.processingCapacity,\n        inventoryCapacity: setting.inventoryCapacity,\n        resilientLevel: this.state.resilientLevelUpgraded,\n        resilientLevelUpgraded: 1,\n        step: -1,\n        messages: [],\n        stepMessage: \"\",\n        messageTitle: \"\",\n        texasPurchasingAmount: 0,\n        californiaPurchasingAmount: 0,\n        purchasingEnabled: false,\n        riskManagementEnabled: false,\n        messagesDrawerVisible: false,\n\n        pExpansionAmount: 0,\n        iExpansionAmount: 0,\n      },\n      this.go\n    );\n  };\n\n  go = () => {\n    if (this.state.roundIdx >= setting.numOfRound) {\n      notification.open({\n        message: \"Game Ended\",\n        description:\n          \"This is the last round of the game. Please click reset game button to reset the game\",\n        duration: 3,\n      });\n      return;\n    }\n\n    if (this.state.wallet < 0) {\n      notification.error({\n        message: \"Game Ended\",\n        description:\n          \"Oops, you are running out of cash ... the business is halted.\",\n        duration: 3,\n      });\n      return;\n    }\n    if (this.state.step >= this.processes.length) return;\n    if (this.state.step === -1) {\n      const roundSetting = this.getCurrentRoundSetting();\n      this.setState(\n        {\n          roundSetting: roundSetting,\n          step: this.state.step + 1,\n        },\n        this.go\n      );\n    } else {\n      const process = this.processes[this.state.step];\n\n      if (this.state.animation && this.state.stepMessage !== \"\") {\n        notification.open({\n          message: this.state.messageTitle,\n          description: this.state.stepMessage,\n          duration: this.state.duration,\n          onClose: process,\n        });\n      } else {\n        if (process) process();\n      }\n    }\n  };\n\n  onDurationChanged = (value) => {\n    this.setState({\n      duration: value,\n    });\n  };\n\n  payFixedCost = () => {\n    let {\n      wallet,\n      fixCostPerRound,\n      step,\n      resilientLevel,\n      processingCapacity,\n      inventoryCapacity,\n      pExpansions,\n      iExpansions,\n      roundIdx,\n    } = this.state;\n    wallet -= fixCostPerRound;\n    let messages = [...this.state.messages];\n\n    messages.push(\n      `Wallet: ${_C(this.state.wallet)}, Inventory: ${_U(\n        this.state.cattleInventory + this.state.productInventory\n      )}`\n    );\n\n    let stepMessage = `Pay fixed cost ${_C(fixCostPerRound)}. `;\n\n    if (resilientLevel > 1) {\n      stepMessage += `Resilience upgrade to L${resilientLevel}. `;\n    }\n\n    pExpansions.forEach((e) => {\n      if (e.effectived <= roundIdx) {\n        processingCapacity += e.amount;\n      }\n      if (e.effectived === roundIdx) {\n        stepMessage += `Processing capacity increase ${_U(e.amount)}. `;\n      }\n    });\n\n    iExpansions.forEach((e) => {\n      if (e.effectived <= roundIdx) {\n        inventoryCapacity += e.amount;\n      }\n      if (e.effectived === roundIdx) {\n        stepMessage += `Inventory capacity increase ${_U(e.amount)}. `;\n      }\n    });\n\n    messages.push(stepMessage);\n    this.setState(\n      {\n        wallet: wallet,\n        messages: messages,\n        step: step + 1,\n        stepMessage: stepMessage,\n        inventoryCapacity,\n        processingCapacity,\n        messageTitle: `Round ${this.state.roundIdx + 1} Start`,\n      },\n      this.go\n    );\n  };\n\n  handleEvent = () => {\n    const { roundSetting } = this.state;\n    let {\n      inventoryLoss,\n      processingCapacityLoss,\n      event,\n      texasDeliveryDelay,\n      californiaDeliveryDelay,\n    } = roundSetting;\n    let { roundIdx, productInventory, processingCapacity, step } = this.state;\n\n    let messages = [...this.state.messages];\n    let orders = [...this.state.orders];\n    let markets = [...this.state.markets];\n\n    let stepMessage = event;\n\n    if (event !== \"\") {\n      messages.push(...event.split(\"\\n\"));\n    }\n\n    productInventory *= 1 - inventoryLoss;\n    processingCapacity *= 1 - processingCapacityLoss;\n\n    if (texasDeliveryDelay > 0) {\n      orders.map((order) => {\n        if (order.expected >= roundIdx && order.source === \"Texas\") {\n          order.expected += texasDeliveryDelay;\n        }\n        return order;\n      });\n    }\n\n    if (californiaDeliveryDelay > 0) {\n      orders.map((order) => {\n        if (order.expected >= roundIdx && order.source === \"California\") {\n          order.expected += californiaDeliveryDelay;\n        }\n        return order;\n      });\n    }\n\n    markets.unshift({\n      roundIdx: roundSetting.roundIdx,\n      demand: roundSetting.demand,\n      sellingPrice: roundSetting.sellingPrice,\n    });\n\n    this.setState(\n      {\n        productInventory: productInventory,\n        processingCapacity: processingCapacity,\n        step: step + 1,\n        messages: messages,\n        markets: markets,\n        stepMessage: stepMessage,\n        messageTitle: \"Event\",\n      },\n      this.go\n    );\n  };\n\n  handleSelling = () => {\n    let messages = [...this.state.messages];\n\n    const { roundSetting } = this.state;\n\n    let { demand, sellingPrice } = roundSetting;\n    let { productInventory, wallet, step } = this.state;\n\n    let amount = Math.min(productInventory, demand);\n    let income = amount * sellingPrice;\n    wallet += income;\n\n    let stepMessage = \"\";\n    if (amount > 0) {\n      stepMessage = `Sold ${_U(amount)}. Income ${_C(income)}.`;\n      messages.push(stepMessage);\n    }\n\n    this.setState(\n      {\n        productInventory: productInventory - amount,\n        wallet: wallet,\n        step: step + 1,\n        messages: messages,\n        stepMessage: stepMessage,\n        messageTitle: \"Selling\",\n      },\n      this.go\n    );\n  };\n\n  handleInbound = () => {\n    let { roundIdx, cattleInventory, step } = this.state;\n    let messages = [...this.state.messages];\n    let orders = [...this.state.orders];\n    let amount = 0;\n    orders.map((order) => {\n      if (order.expected === roundIdx) {\n        amount += order.qty;\n        order.received = true;\n      }\n      return order;\n    });\n    cattleInventory += amount;\n\n    let stepMessage = \"\";\n    if (amount > 0) {\n      stepMessage = `${_U(amount)} Received.`;\n      messages.push(stepMessage);\n    }\n\n    this.setState(\n      {\n        step: step + 1,\n        messages: messages,\n        cattleInventory: cattleInventory,\n        stepMessage: stepMessage,\n        orders: orders,\n        messageTitle: \"Inbound\",\n      },\n      this.go\n    );\n  };\n\n  handleProcessing = () => {\n    let messages = [...this.state.messages];\n    const { roundSetting } = this.state;\n\n    let {\n      processingCapacity,\n      processingCost,\n      processingOverloadCost,\n      wallet,\n      cattleInventory,\n      productInventory,\n      step,\n    } = this.state;\n\n    let { processingShutdown } = roundSetting;\n\n    let stepMessage = \"\";\n    if (processingShutdown) {\n      stepMessage = `Processing Shutdown`;\n    } else {\n      let totalProcessingCost =\n        Math.min(processingCapacity, cattleInventory) * processingCost +\n        Math.max(0, cattleInventory - processingCapacity) *\n          processingOverloadCost;\n      wallet -= totalProcessingCost;\n      productInventory += cattleInventory;\n      if (cattleInventory > 0) {\n        stepMessage = `Process ${_U(cattleInventory)}. Cost ${_C(\n          totalProcessingCost\n        )}`;\n      }\n      cattleInventory = 0;\n    }\n\n    if (stepMessage !== \"\") messages.push(stepMessage);\n\n    console.log(\"Processing: \" + stepMessage);\n\n    this.setState(\n      {\n        messages: messages,\n        cattleInventory: cattleInventory,\n        productInventory: productInventory,\n        wallet: wallet,\n        step: step + 1,\n        stepMessage: stepMessage,\n        messageTitle: \"Processing\",\n      },\n      this.go\n    );\n  };\n\n  onTexasPurchasingAmountChanged = (value) => {\n    this.setState({\n      texasPurchasingAmount: value,\n    });\n  };\n\n  onCaliforniaPurchasingAmountChanged = (value) => {\n    this.setState({\n      californiaPurchasingAmount: value,\n    });\n  };\n\n  handlePurchasing = () => {\n    let messages = [...this.state.messages];\n\n    const { roundSetting } = this.state;\n    const {\n      californiaPurchasingShutdown,\n      texasPurchasingShutdown,\n      californiaPurchasingPrice,\n      texasPurchasingPrice,\n    } = roundSetting;\n    let {\n      roundIdx,\n      wallet,\n      californiaPurchasingAmount,\n      texasPurchasingAmount,\n      step,\n    } = this.state;\n    let orders = [...this.state.orders];\n\n    let stepMessage = \"\";\n    if (texasPurchasingShutdown) {\n      stepMessage += \"Texas farms shutdown. \";\n    } else {\n      if (texasPurchasingAmount > 0) {\n        let order = {\n          created: roundIdx,\n          source: \"Texas\",\n          qty: texasPurchasingAmount,\n          price: texasPurchasingPrice,\n          expected: roundIdx + 1,\n          received: false,\n        };\n        orders.push(order);\n        let orderCost = order.qty * order.price;\n        stepMessage += `Order ${_U(order.qty)} from Texas. Cost ${_C(\n          orderCost\n        )}. `;\n        wallet -= orderCost;\n      }\n    }\n    if (californiaPurchasingShutdown) {\n      stepMessage += \"California farms shutdown. \";\n    } else {\n      if (californiaPurchasingAmount > 0) {\n        let order = {\n          created: roundIdx,\n          source: \"California\",\n          qty: californiaPurchasingAmount,\n          price: californiaPurchasingPrice,\n          expected: roundIdx + 1,\n          received: false,\n        };\n        orders.push(order);\n        let orderCost = order.qty * order.price;\n        stepMessage += `Order ${_U(order.qty)} from California. Cost ${_C(\n          orderCost\n        )}. `;\n        wallet -= orderCost;\n      }\n    }\n\n    if (wallet < 0) {\n      notification.error({\n        message: \"Purchasing\",\n        description: \"Not enough money\",\n        duration: 3,\n      });\n      return;\n    }\n\n    if (stepMessage !== \"\") {\n      messages.push(stepMessage);\n      if (this.state.animation) {\n        notification.open({\n          message: \"Purchasing\",\n          description: stepMessage,\n          duration: this.state.duration,\n        });\n      }\n    }\n    this.setState(\n      {\n        orders: orders,\n        step: step + 1,\n        wallet: wallet,\n        messages: messages,\n        stepMessage: \"\",\n        messageTitle: \"Purchasing\",\n      },\n      this.go\n    );\n  };\n\n  onResilientLevelUpgradedChanged = (e) => {\n    this.setState({\n      resilientLevelUpgraded: e.target.value,\n    });\n  };\n\n  handleResilientLevelUpgrade = () => {\n    let {\n      wallet,\n      upgradeCostL2,\n      upgradeCostL3,\n      resilientLevelUpgraded,\n      pExpansionCostPerkg,\n      pExpansionEffective,\n      pExpansionAmount,\n      iExpansionCostPerkg,\n      iExpansionEffective,\n      iExpansionAmount,\n      step,\n      roundIdx,\n    } = this.state;\n    let messages = [...this.state.messages];\n    let pExpansions = [...this.state.pExpansions];\n    let iExpansions = [...this.state.iExpansions];\n\n    let stepMessage = \"\";\n\n    if (resilientLevelUpgraded === 2) {\n      wallet -= upgradeCostL2;\n\n      stepMessage = `Upgrade resilience to L2, Cost ${_C(\n        upgradeCostL2\n      )}. Come into effect next round.`;\n    } else if (resilientLevelUpgraded === 3) {\n      wallet -= upgradeCostL3;\n      stepMessage = `Upgrade resilience to L3, Cost ${_C(\n        upgradeCostL3\n      )}. Come into effect next round.`;\n    }\n\n    if (pExpansionAmount > 0) {\n      let cost = pExpansionAmount * pExpansionCostPerkg;\n      wallet -= cost;\n      stepMessage += `\\n Expand processing capacity by ${_U(\n        pExpansionAmount\n      )} at the unit cost ${_C(\n        pExpansionCostPerkg\n      )}, which will be effective  ${pExpansionEffective} rounds later.`;\n\n      pExpansions.push({\n        amount: pExpansionAmount,\n        effectived: roundIdx + pExpansionEffective,\n      });\n    }\n\n    if (iExpansionAmount > 0) {\n      let cost = iExpansionAmount * iExpansionCostPerkg;\n      wallet -= cost;\n      stepMessage += `\\n Expand inventory capacity by ${_U(\n        iExpansionAmount\n      )} at the unit cost ${_C(\n        iExpansionCostPerkg\n      )}, which will be effective ${iExpansionEffective} rounds later.`;\n      iExpansions.push({\n        amount: iExpansionAmount,\n        effectived: roundIdx + iExpansionEffective,\n      });\n    }\n\n    if (wallet < 0) {\n      notification.error({\n        message: \"Risk Management\",\n        description: \"Not enough money\",\n        duration: 3,\n      });\n      return;\n    }\n\n    if (stepMessage !== \"\") {\n      messages.push(stepMessage);\n    }\n    this.setState(\n      {\n        messages: messages,\n        wallet: wallet,\n        stepMessage: stepMessage,\n        step: step + 1,\n        messageTitle: \"Risk Management\",\n        iExpansions,\n        pExpansions,\n      },\n      this.go\n    );\n  };\n\n  payInventoryCost = () => {\n    console.log(\"Pay Inventory Cost\");\n    const {\n      productInventory,\n      cattleInventory,\n      inventoryCost,\n      inventoryOverloadCost,\n      inventoryCapacity,\n      step,\n    } = this.state;\n    let { wallet } = this.state;\n    let messages = [...this.state.messages];\n\n    let totalInventory = productInventory + cattleInventory;\n\n    let totalInventoryCost =\n      Math.min(inventoryCapacity, totalInventory) * inventoryCost +\n      Math.max(0, totalInventory - inventoryCapacity) * inventoryOverloadCost;\n\n    wallet -= totalInventoryCost;\n\n    let stepMessage = \"\";\n    if (totalInventory > 0) {\n      stepMessage = `Total Inventory is ${_U(totalInventory)}, Cost ${_C(\n        totalInventoryCost\n      )} for storage`;\n      messages.push(stepMessage);\n    }\n    this.setState(\n      {\n        messages: messages,\n        step: step + 1,\n        wallet: wallet,\n        stepMessage: stepMessage,\n        messageTitle: \"Round End\",\n      },\n      this.go\n    );\n  };\n\n  viewMessages = () => {\n    this.setState({\n      messagesDrawerVisible: true,\n    });\n  };\n\n  onMessagesDrawerClosed = () => {\n    this.setState({\n      messagesDrawerVisible: false,\n    });\n  };\n\n  onAnimationChanged = (checked) => {\n    this.setState({\n      animation: checked,\n    });\n  };\n\n  onPExpansionAmountChanged = (value) => {\n    this.setState({\n      pExpansionAmount: value,\n    });\n  };\n\n  onIExpansionAmountChanged = (value) => {\n    this.setState({\n      iExpansionAmount: value,\n    });\n  };\n\n  render = () => {\n    return (\n      <div className=\"App\">\n        <div id=\"header\">\n          <div className=\"container\">\n            <Row>\n              <Col span={24} lg={{ span: 12 }}>\n                <h1>Beef Packer Game</h1>\n              </Col>\n              <Col span={0} lg={{ span: 12 }}>\n                <div id=\"header-options\">\n                  <AnimationConfig\n                    animation={this.state.animation}\n                    duration={this.state.duration}\n                    onAnimationChanged={this.onAnimationChanged}\n                    onDurationChanged={this.onDurationChanged}\n                  />\n                </div>\n              </Col>\n            </Row>\n          </div>\n        </div>\n\n        <div id=\"content\">\n          <div className=\"container\">\n            <Row gutter={{ lg: 20 }}>\n              <Col span={24} lg={{ span: 0 }}>\n                <Card style={{ marginBottom: 20 }}>\n                  <AnimationConfig\n                    animation={this.state.animation}\n                    duration={this.state.duration}\n                    onAnimationChanged={this.onAnimationChanged}\n                    onDurationChanged={this.onDurationChanged}\n                  />\n                </Card>\n              </Col>\n              <Col span={24} lg={{ span: 10 }}>\n                <GameStatus value={this.state} />\n                <h3 style={{ marginTop: 20 }}>Order List</h3>\n                <OrderList orders={this.state.orders} />\n                <h3 style={{ marginTop: 20 }}>Demand & Price</h3>\n                <MarketView markets={this.state.markets} />\n              </Col>\n              <Col span={24} lg={{ span: 14 }}>\n                <Card title=\"Messages\" style={{ marginBottom: 20 }}>\n                  <Timeline>\n                    {this.state.messages.map((value) => (\n                      <Timeline.Item key={value}>{value}</Timeline.Item>\n                    ))}\n                  </Timeline>\n                </Card>\n\n                {this.state.step !== 5 && this.state.step !== 6 && (\n                  <Card title=\"Purchasing\">\n                    <Skeleton />\n                  </Card>\n                )}\n                {this.state.step === 5 && this.state.wallet >= 0 && (\n                  <Card title=\"Purchasing\">\n                    <Form\n                      labelCol={{ span: 8 }}\n                      size=\"small\"\n                      style={{ marginTop: \"15px\" }}\n                    >\n                      <Form.Item label=\"From Texas: \">\n                        {this.state.roundSetting.texasPurchasingShutdown && (\n                          <span>Farm Shutdown</span>\n                        )}\n                        {!this.state.roundSetting.texasPurchasingShutdown && (\n                          <div>\n                            <InputNumber\n                              size=\"small\"\n                              min={0}\n                              max={100000}\n                              value={this.state.texasPurchasingAmount}\n                              onChange={this.onTexasPurchasingAmountChanged}\n                            />\n                            <span style={{ margin: \"10px\" }}>\n                              {\"x \" +\n                                _C(\n                                  this.state.roundSetting.texasPurchasingPrice\n                                )}\n                            </span>\n                          </div>\n                        )}\n                      </Form.Item>\n                      <Form.Item label=\"From California: \">\n                        {this.state.roundSetting\n                          .californiaPurchasingShutdown && (\n                          <span>Farm Shutdown</span>\n                        )}\n                        {!this.state.roundSetting\n                          .californiaPurchasingShutdown && (\n                          <div>\n                            <InputNumber\n                              size=\"small\"\n                              min={0}\n                              max={100000}\n                              value={this.state.californiaPurchasingAmount}\n                              onChange={\n                                this.onCaliforniaPurchasingAmountChanged\n                              }\n                            />\n                            <span style={{ margin: \"10px\" }}>\n                              {\"x \" +\n                                _C(\n                                  this.state.roundSetting\n                                    .californiaPurchasingPrice\n                                )}\n                            </span>\n                          </div>\n                        )}\n                      </Form.Item>\n\n                      <Form.Item wrapperCol={{ offset: 8 }}>\n                        <Button type=\"primary\" onClick={this.handlePurchasing}>\n                          Order\n                        </Button>\n                      </Form.Item>\n                    </Form>\n                  </Card>\n                )}\n                {this.state.step === 6 && this.state.wallet >= 0 && (\n                  <Card title=\"Risk Management\">\n                    <Form\n                      labelCol={{ span: 8 }}\n                      size=\"small\"\n                      style={{ marginTop: \"15px\" }}\n                    >\n                      <Form.Item label=\"Risk Management\">\n                        <Radio.Group\n                          value={this.state.resilientLevelUpgraded}\n                          onChange={this.onResilientLevelUpgradedChanged}\n                        >\n                          <Radio\n                            value={1}\n                            style={{\n                              display: \"block\",\n                              height: \"30px\",\n                              lineHeight: \"30px\",\n                            }}\n                          >\n                            Resilience L1(Cost $0)\n                          </Radio>\n                          <Radio\n                            value={2}\n                            style={{\n                              display: \"block\",\n                              height: \"30px\",\n                              lineHeight: \"30px\",\n                            }}\n                          >\n                            Upgrade to Resilience L2 (Cost{\" \"}\n                            {_C(this.state.upgradeCostL2)})\n                          </Radio>\n                          <Radio\n                            value={3}\n                            style={{\n                              display: \"block\",\n                              height: \"30px\",\n                              lineHeight: \"30px\",\n                            }}\n                          >\n                            Upgrade to Resilience L3 (Cost{\" \"}\n                            {_C(this.state.upgradeCostL3)})\n                          </Radio>\n                        </Radio.Group>\n                      </Form.Item>\n                      <Form.Item label=\"Processing Capacity: \">\n                        Expand processing capacity by\n                        <InputNumber\n                          size=\"small\"\n                          min={0}\n                          max={100000}\n                          style={{ margin: \"0px 6px\" }}\n                          value={this.state.pExpansionAmount}\n                          onChange={this.onPExpansionAmountChanged}\n                        />\n                        at the unit cost {_C(this.state.pExpansionCostPerkg)},\n                        which will be effective {this.state.pExpansionEffective}{\" \"}\n                        rounds later.\n                      </Form.Item>\n                      <Form.Item label=\"Inventory Capacity: \">\n                        Expand inventory capacity by\n                        <InputNumber\n                          size=\"small\"\n                          min={0}\n                          max={100000}\n                          style={{ margin: \"0px 6px\" }}\n                          value={this.state.iExpansionAmount}\n                          onChange={this.onIExpansionAmountChanged}\n                        />\n                        at the unit cost {_C(this.state.iExpansionCostPerkg)},\n                        which will be effective {this.state.iExpansionEffective}{\" \"}\n                        rounds later.\n                      </Form.Item>\n                      <Form.Item wrapperCol={{ offset: 8 }}>\n                        <Button\n                          type=\"primary\"\n                          onClick={this.handleResilientLevelUpgrade}\n                        >\n                          OK and go to next round\n                        </Button>\n                      </Form.Item>\n                    </Form>\n                  </Card>\n                )}\n                <div style={{ float: \"right\", marginTop: \"20px\" }}>\n                  <Popconfirm\n                    placement=\"bottom\"\n                    title=\"Are you sure to reset the game to round 1?\"\n                    onConfirm={this.resetGame}\n                    okText=\"Yes\"\n                    cancelText=\"No\"\n                  >\n                    <Button type=\"danger\">Reset Game</Button>\n                  </Popconfirm>\n                </div>\n              </Col>\n            </Row>\n          </div>\n        </div>\n        <div id=\"footer\">\n          ©2021 Prof Yanzhi Li\n        </div>\n        <Drawer\n          title=\"Messages\"\n          placement=\"right\"\n          closable={false}\n          onClose={this.onMessagesDrawerClosed}\n          visible={this.state.messagesDrawerVisible}\n          width={500}\n        >\n          <Timeline>\n            {this.state.messages.map((value) => (\n              <Timeline.Item key={value}>{value}</Timeline.Item>\n            ))}\n          </Timeline>\n          ,\n        </Drawer>\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}